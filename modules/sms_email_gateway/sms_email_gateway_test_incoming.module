<?php
// $Id$

/**
 * This is a small test module that accomplishes two goals:
 *
 *   1. Provides simple loopback function that can be used to test the
 *      receiving of messages without a configured e-mail server.
 *
 *   2. Provides an example usage leveraging the built-in metadata capabilities
 *      of the sms_email_gateway module.
 *
 * Check the code notes in this module for details.
 */

/**
 * Implementation of hook_menu().
 */
function sms_email_gateway_test_incoming_menu() {
  $items = array();

  // Menu callback for testing incoming messages.
  $items['admin/sms-email-gateway-test-incoming'] = array(
    'title' => 'SMS e-mail gateway test incoming',
    'page callback' => 'sms_email_gateway_test_incoming',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Testing function for messages arriving via the email gateway.
 *
 * This function provides a simple local callback to allow for testing incoming
 * email gateway messages without a configured gateway script.
 *
 * USAGE:
 *
 * Replace the values in brackets with the values you wish to pass to the
 * sms_email_gateway_receive_message() function.
 *
 * www.yoursite.com/admin/sms-email-gateway-incoming-test?from=[from]&to=[to]&subject=[subject]&message=[message]
 *
 * To properly pass certain portions of an email address, it's necessary to
 * URL encode them.
 *
 * @ = %40
 * + = %2B
 *
 * So, foo+bar_baz@example.com would be encoded as:
 *   foo%2Bbar_baz%40example.com
 *
 * Remember, for your subject and message, spaces are represented by plus signs
 * in a query string.
 */
function sms_email_gateway_test_incoming() {
  $from = $_GET['from'];
  $to = $_GET['to'];
  $subject = $_GET['subject'];
  $message = $_GET['message'];
  sms_email_gateway_process_incoming_message($from, $to, $subject, $message, '');
}

/**
 * Example function for hook_sms_incoming().
 *
 * This example function attempts to display the address mapping capabilities
 * available when the incoming email gateway is used.
 *
 * If any message is sent to either of the following addresses (replace stuff in
 * brackets with real values):
 *   un+[nid]@[yoursite]
 *   [someuser]+un_[nid]@[yoursite]
 *
 * Then the node associated with the passed nid will have it's node body
 * replaced with the contents of the message.
 *
 * @param $op
 *   The operation currently invoked by hook_sms_incoming().
 * @param
 *   $number The phone number associated with the message.
 * @param
 *   $message The text message.
 * @param
 *   $options An associative array of metadata from the email gateway related
 *   to the message.
 *
 *   In the case where the email gateway is processing the incoming SMS message,
 *   the following key/value pairs will be available:
 *
 *     'sms_email_gateway_from'       => Email From: address.
 *     'sms_email_gateway_to'         => Email To: address.
 *     'sms_email_gateway_subject'    => Email subject.
 *     'sms_email_gateway_headers'    => Full headers from the email.
 */
function sms_email_gateway_test_incoming_sms_incoming($op, $number, $message, $options) {

  switch ($op) {
    case 'process':
      // The code below only works when the email gateway metadata is available,
      // so check for that here and bail out if it's not present.
      if (empty($options['sms_email_gateway_to'])) {
        return TRUE;
      }
      // The To: address contains the metadata we need, so parse it.
      $metadata = sms_email_gateway_address_metadata($options['sms_email_gateway_to']);

      // If the address code 'un' is present, then update the node specified by
      // the identifier.
      if ($metadata['address_code'] == 'un' && $metadata['identifier']) {
        // No validation is done on any of this data, so make sure everything is
        // clean!
        if ($node = node_load((int) $metadata['identifier'])) {
          // Let's just replace the node body with the message body.  For extra
          // security paranoia, pre-filter the message data.
          $node->body = check_markup($message, FILTER_FORMAT_DEFAULT, FALSE);
          node_save($node);

          // Node updated, toss a message to watchdog.
          watchdog('email_gateway', '%title has been updated via SMS', array('%title' => $node->title), WATCHDOG_NOTICE, l("view $node->title", "node/$node->nid"));
        }
        else {
          // No node found, throw a watchdog error.
          watchdog('email_gateway', 'No node ID %nid found', array('%nid' => $metadata['identifier']), WATCHDOG_ERROR);
        }
      }
      break;
  }
}
