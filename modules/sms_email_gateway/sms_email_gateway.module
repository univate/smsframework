<?php
// $Id$

function sms_email_gateway_gateway_info() {
  return array(
    'email' => array(
      'name' => 'E-mail',
      'send' => 'sms_email_gateway_send',
      'receive' => TRUE,
      'configure form' => 'sms_email_gateway_admin_form',
      'send form' => 'sms_email_gateway_send_form',
    ),
  );
}

/**
 * Returns custom additions to be added to the send forms
 */
function sms_email_gateway_send_form() {
  $options = array();
  $providers = module_invoke_all('sms_email_gateway_providers');
  asort($providers);
  $options += $providers;

  $form['carrier'] = array(
    '#type' => 'select',
    '#title' => t('Carrier'),
    '#multiple' => FALSE,
    '#description' => t('Select your wireless carrier.'),
    '#options' => $options,
    '#default_value' => -1,
  );

  return $form;
}

/**
 * Builds the admin settings form.
 *
 * @return An array of the form.
 */
function sms_email_gateway_admin_form(&$form_state) {
  $form = array();

/*
  TODO: we may not need these, but leaving here just in case.
  $form['sms_email_gateway_sendmail_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to sendmail'),
    '#default_value' => variable_get('sms_email_gateway_sendmail_path', '/usr/sbin/sendmail'),
    '#description' => t('Enter the full system path to the sendmail program. This is system-dependent. If you have shell access to the system, you can try <em>which sendmail</em> to get the path.'),
  );
  $form['sms_email_gateway_mail_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail user'),
    '#default_value' => variable_get('sms_email_gateway_mail_user', 'eb'),
    '#description' => t('Enter the name of the E-mail bridge user that was created on the mail server. Due to size limits for SMS addresses, the name is limited to three characters.'),
    '#size' => 3,
    '#maxlength' => 3,
  );
  $form['sms_email_gateway_mail_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail domain'),
    '#default_value' => variable_get('sms_email_gateway_mail_domain', 'example.com'),
    '#description' => t('Enter domain where the email bridge messages are received.'),
  );*/
  $form['sms_email_gateway_enable_node_id'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable node ID mapping.'),
    '#default_value' => variable_get('sms_email_gateway_enable_node_id', 0),
    '#description' => t('Enabling this allows numeric address codes (ex. 12345@example.com) to be mapped to Drupal node IDs.'),
  );
  $form['sms_email_gateway_enable_user_id'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable user ID mapping.'),
    '#default_value' => variable_get('sms_email_gateway_enable_user_id', 0),
    '#description' => t('Enabling this allows numeric address codes (ex. 12345@example.com) to be mapped to Drupal user IDs.'),
  );
  $form['sms_email_gateway_enable_username'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Drupal username mapping.'),
    '#default_value' => variable_get('sms_email_gateway_enable_username', 0),
    '#description' => t('Enabling this allows address codes (ex. bob@example.com) to be mapped to Drupal usernames.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_xmlrpc()
 */
function sms_email_gateway_xmlrpc() {
  return array(
    // Process the data from a received e-mail.
    array(
      'emailGateway.send',
      'sms_email_gateway_receive_message',
      array('int', 'string', 'string', 'string', 'string', 'string', 'string'),
      t('sends a received e-mail to the configured Drupal site')
    ),
  );
}

/**
 * Passes the data from a received e-mail to a callback function.
 *
 * @param
 *   $code A two letter identifier which is declared in
 *   hook_sms_email_gateway_function_map().
 * @param
 *   $identifier Custom identifier to pass to the callback function. ex. A nid.
 * @param
 *   $from The address the email was sent from.
 * @param
 *   $subject The e-mail subject.
 * @param
 *   $message The body of the email message.
 * @param
 *   $headers A string of the full headers from email.
 *
 * @return
 *   Successful exit code.
 */
function sms_email_gateway_receive_message($code, $identifier, $from, $subject, $message, $headers) {
  // Force lowercase for the bridge code and identifier.
  $code = drupal_strtolower($code);
  $identifier = drupal_strtolower($identifier);

  // Grab the callback mapping.
  $function_map = module_invoke_all('sms_email_gateway_function_map');

  // Try to figure out the number this message came from.  This is a bit hairy
  // with email, so we're just trying to determine if the address username is
  // all numbers -- if it is, use it as the number, otherwise don't pass a
  // number.
  $split = explode('@', $from);
  if (preg_match('/[^\d]/', $split[0])) {
    $number = NULL;
  }
  else {
    $number = $split[0];
  }

  // Build email-specific metadata.
  $options = array(
    'sms_email_gateway_identifier' => $identifier,
    'sms_email_gateway_from' => $from,
    'sms_email_gateway_subject' => $subject,
    'sms_email_gateway_headers' => $headers,
  );

  // If a valid callback exists, execute it.
  if (isset($function_map[$code]) && function_exists($function_map[$code])) {
    $function = $function_map[$code];
    $function($number, $message, $options);
  }
  // Numeric bridge codes can be either a user or node ID, so check.
  elseif (is_numeric($code)) {
    if (variable_get('sms_email_gateway_enable_node_id', 0)) {
      if ($node = node_load($code)) {
        $options['#node'] = $node;
        sms_incoming($number, $message, $options);
      }
    }
    if (variable_get('sms_email_gateway_enable_user_id', 0)) {
      if ($account = user_load(array('uid' => $code))) {
        $options['#account'] = $account;
        sms_incoming($number, $message, $options);
      }
    }
  }
  // Nothing else matched, so see if a username match exists.
  elseif (variable_get('sms_email_gateway_enable_username', 0)) {
    if ($account = user_load(array('name' => $code))) {
      $options['#account'] = $account;
      sms_incoming($number, $message, $options);
    }
  }

  return 0;
}

/**
 * Callback for sending messages.
 */
function sms_email_gateway_send($number, $message, $options) {
  $from = !empty($options['from']) ? $options['from'] : NULL;
  $to = $number .'@'. $options['carrier'];
  $params['message'] = $message;
  $message = drupal_mail('sms_email_gateway', 'sms', $to, language_default(), $params, $from);
  if ($message['result']) {
    return array('status' => TRUE);
  }
}

/**
 * Implementation of hook_mail().
 */
function sms_email_gateway_mail($key, &$message, &$params) {
  $message['body'] = $params['message'];
  unset($message['params']['message']);
}

/**
 * Implementation of hook_sms_email_gateway_providers()
 */
function sms_email_gateway_sms_email_gateway_providers() {
  return array(
    'msg.acsalaska.com' => t('Alaska Communications Systems'),
    'message.alltel.com' => t('Alltel Wireless'),
    'txt.att.net' => t('AT&T/Cingular'),
    'mobile.celloneusa.com' => t('CellularOne'),
    'cwemail.com' => t('Centennial Wireless'),
    'sms.mycricket.com' => t('Cricket'),
    'messaging.sprintpcs.com' => t('Helio'),
    'page.nextel.com' => t('Nextel'),
    'qwestmp.com' => t('Qwest'),
    'messaging.sprintpcs.com' => t('Sprint'),
    'tmomail.net' => t('T-Mobile'),
    'vmobl.com' => t('Virgin Mobile'),
    'vtext.com' => t('Verizon'),
  );
}