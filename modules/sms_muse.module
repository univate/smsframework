<?
// $Id$

function sms_muse_gateway_info() {
  $options['sms_muse_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t('The username of your Muse account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('sms_muse_user', ''),
    '#required' => true,
  );
  $options['sms_muse_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The current password on your Muse account.'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => variable_get('sms_muse_password', ''),
    '#required' => true,
  );
  $options['sms_muse_soap'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP'),
    '#description' => t('The SOAP access point.'),
    '#size' => 30,
    '#maxlength' => 255,
    '#default_value' => variable_get('sms_muse_soap', ''),
    '#required' => true,
  );
    $options['sms_muse_service'] = array(
    '#type' => 'textfield',
    '#title' => t('Service name'),
    '#description' => t('The service that you would like to use with this account.'),
    '#size' => 30,
    '#maxlength' => 255,
    '#default_value' => variable_get('sms_muse_service', ''),
    '#required' => true,
  );
  drupal_add_css(drupal_get_path('module', 'sms_muse') .'/sms_muse.css');
  drupal_add_js(drupal_get_path('module', 'sms_muse') .'/sms_muse.js');
  $options['sms_muse_validate'] = array(
    '#type' => 'button',
    '#value' => t('Validate'),
    '#weight' => 10,
    );
	return array(
    'muse' => array(
      'name' => 'Muse',
      'identifier' => 'muse',
      'options' => $options,
      // 'validate' => 'sms_muse_validate',
      'send' => 'sms_muse_send',
     // 'send_form' => 'sms_muse_send_form',
    ),
  );
}

function sms_muse_send_form() {
  /* $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#multiple' => FALSE,
    '#options' => sms_muse_country_codes(),
    '#default_value' => -1,
    // '#required' => TRUE,
  );*/
  $form = array();
  return $form;
}

function sms_muse_send($destinations, $message) {
  $number = array();
  foreach($destinations as $destination) {
    $number[] = $destination->number;
  }
  $result = sms_muse_command('sendmsg', array('number' => $number, 'message' => $message));
  return $result;
}

function sms_muse_balance() {
  return sms_muse_command('getbalance');
}

function sms_set_callback($url) {
  return sms_muse_command('setcallback', array('url' => $url));
}

function sms_get_callback() {
  return sms_muse_command('getcallback');
}

/*
 * Execute commands against the Muse server
 */
function sms_muse_command($command = 'auth', $data = array(), $config = NULL) {
  $gateway = sms_gateways('gateway', 'muse');
    
  if ($config == NULL) {
    $config = $gateway['configuration'];
  }

  $usesoap = $config['sms_muse_soap'];
  $smsservicename = $config['sms_muse_service'];
  
  try {
    $client = new SoapClient($usesoap);
  } catch (Exception $e) {
    drupal_set_message('Error caught for '. $usesoap .': ' . $e->getMessage());
    return;
  }
  
  //$transervicename = "QMTranscode";
  //$mmsservicename = "Some MMS Service Point";
  
  switch ($command) {
    case 'auth':
      $userid = $config['sms_muse_user']; // raincity
      $pwd = $config['sms_muse_password']; // Raincity2008
      try {
	$result = $client->userAuthenticate($userid, $pwd);
	//  Remember the token returned in order to send the message
	$user = $result->AuthenticateToken;
	drupal_set_message("Muse authentication was successful.");
	variable_set('sms_muse_session_id', $user);
	variable_set('sms_clickatell_session_id_timestamp', time());
	$result = true;
      } catch (Exception $e) {
        drupal_set_message("Authentication failed: " . $e->getMessage());
        $result = $e;
      }
    break;
    case 'sendmsg':
      $phonenums = $data['number'];
      $message = $data['message'];
      if (variable_get('sms_clickatell_session_id_timestamp', 0) < strtotime('-50 mins')) {
  	sms_muse_command();
      }
      $user = variable_get('sms_muse_session_id', '');
      try {
        $phonenums = $client->CleanPhoneList($user, $phonenums, $smsservicename);
      } catch (Exception $e){
 	drupal_set_message('Clean phone list failed: ' . $e->getMessage());
 	  	/*if($e->faultcode == 3) { // Expired authentication
 	  	  sms_muse_command();
 	  	  $user = variable_get('sms_muse_session_id', '');
 	  	  try {
        	$phonenums = $client->CleanPhoneList($user,$phonenums,$smsservicename);
 	  	  } catch (Exception $e){
 	  		drupal_set_message('Clean phone list failed: ' . $e->getMessage());
 	  	  }
 	  	}*/
      } 	  
      try {
	$result = $client->sendSMS($user, null, $smsservicename, $phonenums, $message, "TEST");
        drupal_set_message("Send message was successful.");
        $result = true;
      } catch (Exception $e){
        drupal_set_message('Send SMS failed: ' . $e->getMessage());
        $return = false;
      }
    break;
    case 'setcallback':
      $user = variable_get('sms_muse_session_id', '');
      $url = $data['url'];
      try {
        $result = $client->setCallBackURL($user, null, $smsservicename, $url);
      } catch (Exception $e) {
        drupal_set_message('Error getting callback: '. $e->getMessage());
      }
    break;
    case 'getcallback':
      if (variable_get('sms_clickatell_session_id_timestamp', 0) < strtotime('-50 mins')) {
  	sms_muse_command();
      }
      $user = variable_get('sms_muse_session_id', '');
      $result = $client->getCallBackURL($user, $smsservicename);
    break;
  }
  return $result;
}
function sms_muse_get_session_id() {
  if (variable_get('sms_muse_session_id_timestamp', 0) < strtotime('-10 mins')) {
    if ($result = sms_muse_command()) {
      if ($result['status'] == 'OK') {
        variable_set('sms_muse_session_id', $result['data']);
        variable_set('sms_muse_session_id_timestamp', time());
        watchdog('sms', t('Muse session ID refreshed: ' . $result['data']));
      }
    }
  }
  return variable_get('sms_muse_session_id', 0);
}

function sms_muse_error_codes() {
  return array(
    1 => 'AUTHENTICATION_FAULT',
    2 => 'SEND_FAULT',
    3 => 'Expired authentication token', // SUBSCRIPTION_FAULT
    4 => 'SMSSEND_FAULT',
    5 => 'SMSPUSH_FAULT',
    6 => 'TRANSCODESUBMIT_FAULT', // CALLBACK_FAULT?
    7 => 'PHONENUMBER_FAULT',
    8 => 'CREDIT_FAULT',
    9 => 'INVALID_COMPONENT_FAULT',
    10 => 'CONTROL_FAULT', // LBSQUERY_FAULT? REST_FAULT?
  );
}

function sms_muse_menu() {
  $items[] = array(
    'path' => 'admin/smsframework/muse',
    'title' => t('Muse Testing'),
    'description' => t('Test functions for Muse.'),
    'callback' => 'sms_muse_test',
    'access' => user_access('administer smsframework'),
  );
  $items[] = array(
    'path' => 'sms/in/auth',
    'type' => MENU_CALLBACK,
    'access' => TRUE,
    'callback' => sms_muse_authenticate,
  );
  return $items;
}

function sms_muse_authenticate() {
  $gateway = sms_gateways('gateway', 'muse');
  $smsservicename = $_GET['service'];
  $usesoap = $_GET['soap'];
  $username = $_GET['username'];
  $password = $_GET['password'];
  $error = '';
  
  if(class_exists('SoapClient')) {
    try {
      $client = new SoapClient($usesoap);
    } catch (SoapFault $e) {
      $error .= $e->getMessage();
    }
    if(empty($e)) {
      try {
        $result = $client->userAuthenticate($username, $password);
        $user = $result->AuthenticateToken;
        $result = true;
      } catch (Exception $e) {
        $error .= $e->getMessage();
      }
    }
  }
  else {
    $error .= 'SOAP is not installed on your server';
  }
  
  print drupal_to_js(array(
    'authenticated' => $result,
    'error' => $error,
    )		
  );
}

function sms_muse_test() {
  $output = drupal_get_form('sms_muse_test_send');
  $output .= drupal_get_form('sms_muse_test_set_callback');
  $output .= drupal_get_form('sms_muse_test_get_callback');
  $output .= drupal_get_form('sms_muse_test_auth');
  return $output;
}

function sms_muse_test_send() {
  $form['sms_muse_test_send_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#description' => t('The number to send a test message. Comma separated for multiple numbers (eg. 7785555555,604555555)'),
    '#size' => 40,
    '#maxlength' => 255,
  );
  $form['sms_muse_test_send_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('The message you want to send'),
    '#size' => 40,
    '#maxlength' => 140,
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Test'),
  );
  return $form;
}
function sms_muse_test_send_submit($form_id, $form_values) {
  $destinations = explode(",", $form_values['sms_muse_test_send_number']);
  $numbers = array();
  foreach($destinations as $destination => $key) {
    $number = new stdClass();
    $number->number = $key;
    $numbers[] = $number;
  }
  $message = $form_values['sms_muse_test_send_message'];
  sms_send($numbers, $message);
}

function sms_muse_test_get_callback() {
  $form['sms_muse_test_get_callback'] = array(
    '#value' => 'Check current callback URL from Muse.'
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Get Muse Callback'),
  );
  return $form;
}

function sms_muse_test_get_callback_submit($form_id, $form_values) {
  $result = sms_muse_command('getcallback');
  drupal_set_message('Received callback: ' . $result);
}

function sms_muse_test_set_callback() {
  $form['sms_muse_test_set_callback'] = array(
    '#type' => 'textfield',
    '#title' => t('Set callback url'),
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Set Muse Callback'),
  );
  return $form;
}

function sms_muse_test_set_callback_submit($form_id, $form_values) {
  $result = sms_set_callback($form_values['sms_muse_test_set_callback']);
 // $result = sms_muse_command('setcallback', array('url' => $form_values['sms_muse_test_set_callback']));
  drupal_set_message('Old callback: ' . $result->URL . ', new callback: ' . $form_values['sms_muse_test_set_callback']);
}

function sms_muse_test_auth() {
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Authenticate'),
  );
  return $form;
}

function sms_muse_test_auth_submit($form_id, $form_values) {
  $result = sms_muse_command();
  drupal_set_message($result);
}

function sms_muse_receive_parse() { // hook for for sms_receive.module
  $result = array();
  $result['type'] = check_plain($_GET['Type']); // will be 'sms' unless with media
  $result['from'] = check_plain($_GET['From']);
  $result['text'] = check_plain($_GET['Text']);

  return $result;
}

function sms_muse_receive_fields() {
  return array('type', 'from', 'text');
}