<?php
// $Id$

function gateway_clickatell_smsframework_info() {
  $options['ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SSL Encyption'),
    '#description' => t('Drupal\'s built-in HTTP client only supports SSL on PHP 4.3 compiled with OpenSSL.'),
    '#default_value' => variable_get('gateway_clickatell_ssl', 0),
  );
  $options['api_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API ID'),
    '#description' => t('Clickatell issues this number upon addition of an HTTP sub-product to your account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('gateway_clickatell_api_id', ''),
  );
  $options['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t('The username of your Clickatell account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('gateway_clickatell_user', ''),
  );
  $options['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The current password on your Clickatell account.'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => variable_get('gateway_clickatell_password', ''),
  );
  
  return array(
    'clickatell' => array(
      'name' => 'Clickatell',
      'identifier' => 'clickatell',
      'options' => $options,
      'validate' => 'gateway_clickatell_validate',
      'send' => 'gateway_clickatell_send',
      'delivery_status' => 'gateway_clickatell_status',
    ),
  );
}

function gateway_clickatell_validate($form_id, $form_values) {
  $result = gateway_clickatell_command('auth', array(), $form_values);
  $codes = gateway_clickatell_error_codes();
  if ($result['status'] == 'ERR') {
    form_set_error('', t('A Clickatell gateway error occured: ' . $codes[floor($result['code'])]));
  }
}

function gateway_clickatell_send($destination, $message, $mid) {
  $result = gateway_clickatell_command('sendmsg', array('destination' => $destination, 'message' => $message, 'mid' => $mid));
  
  if ($result) {
    
  }
}

function gateway_clickatell_balance() {
  $result = gateway_clickatell_command('getbalance');
  return $return['data'];
}

/**
 * Executes a command using the Clickatell API
 */
function gateway_clickatell_command($command = 'auth', $data = array(), $config = NULL) {
  $gateway = smsframework_gateways('gateway', 'clickatell');
  
  if ($config == NULL) {
    $config = $gateway['configuration'];
  }
  
  if ($config['ssl']) {
    $scheme = 'https';
  }
  else {
    $scheme = 'http';
  }
  
  switch ($command) {
    case 'auth':
      $query = 'api_id=' . $config['api_id'] . '&user=' . $config['user'] . '&password=' . $config['password'];
      break;
    case 'sendmsg':
      $query = 'session_id=' . gateway_clickatell_get_session_id() . '&to=' . $data['destination'] . '&text=' . $data['message'] . '&climsgid=' . $data['mid'];
      break;
    case 'getbalance':
      $query = 'session_id=' . gateway_clickatell_get_session_id();
      break;
  }

  // Run the command
  $result = drupal_http_request($scheme . '://api.clickatell.com/http/' . $command . '?' . $query);
  // dprint_r($scheme . '://api.clickatell.com/http/' . $command . '?' . $query);
  // Check for HTTP errors
  if ($result->error) {
    drupal_set_message(t('An error occured during the HTTP request: ' . $result->error), 'error');
    return 0;
  }
  
  if ($result->data) {
    switch ($command) {
      case 'auth':
        list($response['status'], $response['data']) = explode(': ', $result->data);
        $response['code'] = drupal_substr($response['data'], 0, 3);
        $response['message'] = drupal_substr($response['data'], 5, drupal_strlen($response['data']) - 1);
        break;
      case 'sendmsg':
        $response = explode(': ', $result->data);
        break;
      case 'getbalance':
        list($response['status'], $response['data']) = explode(': ', $result->data);
        break;
    }
    
    return $response;
  }
}

function gateway_clickatell_get_session_id() {
  if (variable_get('gateway_clickatell_session_id_timestamp', 0) < strtotime('-10 mins')) {
    if ($result = gateway_clickatell_command()) {
      variable_set('gateway_clickatell_session_id', $result['data']);
      variable_set('gateway_clickatell_session_id_timestamp', time());
    }
  }
  return variable_get('gateway_clickatell_session_id', 0);
}

/**
 * Returns an array of error codes and messages that are generated by the Clickatell gateway
 */
function gateway_clickatell_error_codes() {
  return array(
    001 => 'Authentication failed', 002 => 'Unknown username or password', 003 => 'Session ID expired',
    004 => 'Account frozen', 005 => 'Missing session ID', 007 => 'IP Lockdown violation',
    101 => 'Invalid or missing parameters', 102 => 'Invalid user data header',
    103 => 'Unknown API message ID', 104 => 'Unknown client message ID',
    105 => 'Invalid destination address', 106 => 'Invalid source address', 107 => 'Empty message',
    108 => 'Invalid or missing API ID', 109 => 'Missing message ID',
    110 => 'Error with email message',
    111 => 'Invalid protocol', 112 => 'Invalid message type',
    113 => 'Maximum message parts exceeded',
    114 => 'Cannot route message',
    115 => 'Message expired',
    116 => 'Invalid Unicode data', 120 => 'Invalid delivery time',
    201 => 'Invalid batch ID', 202 => 'No batch template',
    301 => 'No credit left', 302 => 'Max allowed credit',
  );
}