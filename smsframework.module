<?php
// $Id$

/**
 * @file
 * Write this
 */

/**
 * Implementation of hook_menu().
 */
function smsframework_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/smsframework',
      'title' => t('SMS Framework'),
      'description' => t('Control how your site uses SMS.'),
      'position' => 'right',
      'callback' => 'system_admin_menu_block_page',
      'access' => user_access('administer smsframework'),
    );
    
    $items[] = array(
      'path' => 'admin/smsframework/gateways',
      'title' => t('Gateways'),
      'description' => t('Configure available gateways and change the active gateway.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('smsframework_admin_overview'),
      'access' => user_access('administer smsframework'),
    );
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'smsframework' && arg(2) == 'gateways' && arg(3)) {
      $gateways = smsframework_gateways();
      if(isset($gateways[arg(3)])) {
        $items[] = array(
          'path' => 'admin/smsframework/gateways/' . arg(3),
          'title' => t("!gateway gateway", array('!gateway' => $gateways[arg(3)]['name'])),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('smsframework_admin_gateway_form', $gateways[arg(3)], arg(3)),
          'access' => user_access('administer smsframework'),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function smsframework_perm() {
  return array('administer smsframework');
}

function smsframework_admin_overview() {
  $gateways = smsframework_gateways();
  
  foreach ($gateways as $identifier => $gateway) {
    $active = ($identifier == variable_get('smsframework_active_gateway', 0));
    $options[$identifier] = '';
    $form[$gateway['name']]['id'] = array('#value' => $identifier);
    $form[$gateway['name']]['configure'] = array('#value' => l(t('configure'), 'admin/smsframework/gateways/' . $identifier));
  }
  $form['active'] = array('#type' => 'radios', '#options' => $options, '#default_value' => variable_get('smsframework_active_gateway', 0));
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Set active gateway'),
  );
  
  return $form;
}

function smsframework_admin_overview_submit($form_id, $form_values) {
  // Process form submission to set the default format
  if ($form_values['active']) {
    drupal_set_message(t('Active gateway updated.'));
    variable_set('smsframework_active_gateway', $form_values['active']);
  }
}

function theme_smsframework_admin_overview($form) {
  $rows = array();
  foreach ($form as $name => $element) {
    if (isset($element['id']) && is_array($element['id'])) {
      $rows[] = array(
        drupal_render($form['active'][$element['id']['#value']]),
        check_plain($name),
        drupal_render($element['configure']),
      );
      unset($form[$name]);
    }
  }
  $header = array(t('Active'), t('Name'), array('data' => t('Operations'), 'colspan' => 1));
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

function smsframework_admin_gateway_form($gateway = NULL, $gateway_id = '') {
  if(isset($gateway) && is_array($gateway)) {
    $form = $gateway['options'];
    $form['submit'] = array(
      '#type' => 'submit', 
      '#value' => t('Save'),
    );
    $form['#validate'] = array('smsframework_admin_gateway_form_validate' => array(), $gateway['validate'] => array());
    $form['gateway'] = array('#type' => 'value', '#value' => $gateway);
    $form['gateway_id'] = array('#type' => 'value', '#value' => $gateway_id);
    
    return $form;    
  }
}

function smsframework_admin_gateway_form_validate($form_id, $form_values) {
  
}

function smsframework_admin_gateway_form_submit($form_id, $form_values) {
  $gateway = $form_values['gateway'];
  if (is_array($gateway['options'])) {
    foreach ($gateway['options'] as $key=>$option) {
      variable_set('gateway_' . $form_values['gateway_id'] . '_' . $key, $form_values[$key]);
    }
  }
  drupal_set_message(t('The gateway settings have been saved.'));
  return 'admin/settings/smsframework/';
}

/**
 * Get a list of all gateways
 *
 * @param $op
 *   The format in which to return the list. When set to 'gateway' or 'name',
 *   only the specified gateway is returned. When set to 'gateways' or 'names',
 *   all gateways are returned.
 *
 * @param $gateway
 *   A gateway identifier string that indicates the gateway to return. Leave at default
 *   value (NULL) to return all gateways.
 *
 * @return
 *   Either an array of all gateways or a single gateway, in a variable format.
 **/
function smsframework_gateways($op = 'gateways', $gateway = NULL) {
  list($_gateways, $_names) = _gateways_build();
  
  switch ($op) {
    case 'gateways':
      return $_gateways;
    case 'gateway':
      return $_gateways[$gateway];
    case 'names':
      return $_names;
    case 'name':
      return $_names[$gateway];
  }
}

function _gateways_build() {
  $_gateways = array();
  $_names = array();
  
  $gateway_array = module_invoke_all('smsframework_info');
  foreach ($gateway_array as $identifier => $info) {
    if (is_array($info['options'])) {
      foreach ($info['options'] as $key=>$option) {
        $info['configuration'][$key] = variable_get('gateway_' . $identifier . '_' . $key, '');
      }
    }
    $_gateways[$identifier] = $info;
    $_names[$identifier] = $info['name'];
  }
  
  asort($_names);
  
  return array($_gateways, $_names);
}

/**
 * Sends a message using the active gateway.
 * 
 * @param $destination
 *   A single destination or an array containing multiple destinations.
 * @param $message
 *   The text of the messsage to send.
 */
function smsframework_send($destination, $message) {
  $gateway = smsframework_active_gateway();
    
  if (function_exists($gateway['send'])) {
    if (is_array($destination)) {
      foreach ($destination as $this_destination) {
        $mid = db_next_id('{sms_messages}');
        db_query('INSERT INTO {sms_messages} (mid, sent, status, destination, message, gateway) VALUES(%d, %d, %d, "%s", "%s", "%s")', $mid, time(), 0, $this_destination, $message, $gateway['identifier']);
        
        // Executes the active gateway's send function
        $gateway['send']($this_destination, $message, $mid);
      }
    }
    else {
      $mid = db_next_id('{sms_messages}');
      db_query('INSERT INTO {sms_messages} (mid, sent, status, destination, message, gateway) VALUES(%d, %d, %d, "%s", "%s", "%s")', $mid, time(), 0, $destination, $message, $gateway['identifier']);
      
      // Executes the active gateway's send function
      $gateway['send']($destination, $message, $mid);
    }
  }
}

/**
 * Returns the active gateway
 */
function smsframework_active_gateway() {
  return smsframework_gateways('gateway', variable_get('smsframework_active_gateway', 0));
}

/**
 * Callback that receives message delivery status
 */
function smsframework_delivery_status() {
  
}

function smsframework_verify() {
  
}